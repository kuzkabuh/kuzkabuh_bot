import os
import re
import requests

from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.utils.executor import start_webhook
from dotenv import load_dotenv

# 1. –ó–∞–≥—Ä—É–∂–∞–µ–º .env
load_dotenv('/root/kuzkabuh/.env')

BOT_TOKEN       = os.getenv('KUZKABUH_BOT_TOKEN')
WEBHOOK_HOST    = os.getenv('WEBHOOK_HOST')
WEBHOOK_PATH    = os.getenv('KUZKABUH_WEBHOOK_PATH')
WEBHOOK_URL     = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"
WEBAPP_HOST     = "0.0.0.0"
WEBAPP_PORT     = 8001

ADMIN_ID        = int(os.getenv('ADMIN_TELEGRAM_ID'))
ADMIN_USER      = os.getenv('ADMIN_USER')
ADMIN_PASS      = os.getenv('ADMIN_PASS')
FLASK_ADMIN_API = os.getenv('FLASK_ADMIN_API')

# 2. FSM ‚Äî —Å–æ—Å—Ç–æ—è–Ω–∏—è
class OrderStates(StatesGroup):
    waiting_for_inn          = State()
    waiting_for_email        = State()
    waiting_for_name         = State()
    waiting_for_phone        = State()
    waiting_for_contact_time = State()
    waiting_for_service      = State()
    waiting_for_urgency      = State()
    confirm                  = State()

# 3. –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
main_kb = InlineKeyboardMarkup().add(
    InlineKeyboardButton("–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data="new_order")
)
cancel_kb = InlineKeyboardMarkup().add(
    InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")
)
back_cancel_kb = InlineKeyboardMarkup(row_width=2).add(
    InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back"),
    InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")
)
time_kb = InlineKeyboardMarkup(row_width=2).add(
    InlineKeyboardButton("–°–µ–≥–æ–¥–Ω—è 14:00-16:00", callback_data="time_14_16"),
    InlineKeyboardButton("–°–µ–≥–æ–¥–Ω—è 16:00-18:00", callback_data="time_16_18"),
    InlineKeyboardButton("–ó–∞–≤—Ç—Ä–∞ 10:00-12:00", callback_data="time_tomorrow_10_12"),
    InlineKeyboardButton("–ó–∞–≤—Ç—Ä–∞ 12:00-14:00", callback_data="time_tomorrow_12_14"),
)
services = [
    "–ë—É—Ö–≥–∞–ª—Ç–µ—Ä—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ",
    "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ò–ü/–û–û–û",
    "–°–¥–∞—á–∞ –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏",
    "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è",
    "–î—Ä—É–≥–æ–µ"
]
service_kb = InlineKeyboardMarkup(row_width=1)
for svc in services:
    service_kb.add(InlineKeyboardButton(svc, callback_data=f"service_{svc}"))
urgency_kb = InlineKeyboardMarkup(row_width=2).add(
    InlineKeyboardButton("–û–±—ã—á–Ω–∞—è", callback_data="urgency_normal"),
    InlineKeyboardButton("–°—Ä–æ—á–Ω–æ",   callback_data="urgency_urgent")
)

# 4. –ë–æ—Ç –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# 5. –•—ç–Ω–¥–ª–µ—Ä—ã

@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É.",
        reply_markup=main_kb
    )

@dp.callback_query_handler(lambda c: c.data=="new_order")
async def process_new_order(cq: types.CallbackQuery, state: FSMContext):
    await OrderStates.waiting_for_inn.set()
    await cq.message.answer("–í–≤–µ–¥–∏—Ç–µ –ò–ù–ù (10 –∏–ª–∏ 12 —Ü–∏—Ñ—Ä):", reply_markup=cancel_kb)
    await cq.answer()

# –í–≤–æ–¥ –ò–ù–ù
@dp.message_handler(lambda m: not re.fullmatch(r'\d{10}|\d{12}', m.text),
                    state=OrderStates.waiting_for_inn)
async def invalid_inn(message: types.Message):
    await message.answer("‚ùóÔ∏è –ò–ù–ù –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 10 –∏–ª–∏ 12 —Ü–∏—Ñ—Ä.", reply_markup=cancel_kb)

@dp.message_handler(lambda m: re.fullmatch(r'\d{10}|\d{12}', m.text),
                    state=OrderStates.waiting_for_inn)
async def process_inn(message: types.Message, state: FSMContext):
    await state.update_data(inn=message.text)
    await OrderStates.next()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à Email:", reply_markup=back_cancel_kb)

# –í–≤–æ–¥ Email
@dp.message_handler(lambda m: not re.fullmatch(r"[^@]+@[^@]+\.[^@]+", m.text),
                    state=OrderStates.waiting_for_email)
async def invalid_email(message: types.Message):
    await message.answer("‚ùóÔ∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email. –ü—Ä–∏–º–µ—Ä: example@mail.ru", reply_markup=back_cancel_kb)

@dp.message_handler(lambda m: re.fullmatch(r"[^@]+@[^@]+\.[^@]+", m.text),
                    state=OrderStates.waiting_for_email)
async def process_email(message: types.Message, state: FSMContext):
    await state.update_data(email=message.text)
    await OrderStates.next()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:", reply_markup=back_cancel_kb)

# –í–≤–æ–¥ –ò–º–µ–Ω–∏
@dp.message_handler(lambda m: len(m.text.strip())<2,
                    state=OrderStates.waiting_for_name)
async def invalid_name(message: types.Message):
    await message.answer("‚ùóÔ∏è –ò–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞.", reply_markup=back_cancel_kb)

@dp.message_handler(state=OrderStates.waiting_for_name)
async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text.strip())
    await OrderStates.next()
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω (+7XXXXXXXXXX –∏–ª–∏ 8XXXXXXXXXX):",
        reply_markup=back_cancel_kb
    )

# –í–≤–æ–¥ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
@dp.message_handler(lambda m: not re.fullmatch(r'^(?:\+7|8)\d{10}$', m.text),
                    state=OrderStates.waiting_for_phone)
async def invalid_phone(message: types.Message):
    await message.answer(
        "‚ùóÔ∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: +71231234567 –∏–ª–∏ 81231234567",
        reply_markup=back_cancel_kb
    )

@dp.message_handler(lambda m: re.fullmatch(r'^(?:\+7|8)\d{10}$', m.text),
                    state=OrderStates.waiting_for_phone)
async def process_phone(message: types.Message, state: FSMContext):
    await state.update_data(phone=message.text)
    await OrderStates.next()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –≤—Ä–µ–º—è –¥–ª—è —Å–≤—è–∑–∏:", reply_markup=time_kb)

# –í—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏
@dp.callback_query_handler(lambda c: c.data.startswith("time_"),
                           state=OrderStates.waiting_for_contact_time)
async def process_contact_time(cq: types.CallbackQuery, state: FSMContext):
    slot = cq.data.replace("time_","").replace("_"," ").capitalize()
    await state.update_data(contact_time=slot)
    await OrderStates.next()
    await cq.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:", reply_markup=service_kb)
    await cq.answer()

# –í—ã–±–æ—Ä —É—Å–ª—É–≥–∏
@dp.callback_query_handler(lambda c: c.data.startswith("service_"),
                           state=OrderStates.waiting_for_service)
async def process_service(cq: types.CallbackQuery, state: FSMContext):
    svc = cq.data.replace("service_","")
    await state.update_data(service=svc)
    await OrderStates.next()
    await cq.message.edit_text("–£–∫–∞–∂–∏—Ç–µ —Å—Ä–æ—á–Ω–æ—Å—Ç—å:", reply_markup=urgency_kb)
    await cq.answer()

# –í—ã–±–æ—Ä —Å—Ä–æ—á–Ω–æ—Å—Ç–∏
@dp.callback_query_handler(lambda c: c.data.startswith("urgency_"),
                           state=OrderStates.waiting_for_urgency)
async def process_urgency(cq: types.CallbackQuery, state: FSMContext):
    urg = "–°—Ä–æ—á–Ω–æ" if cq.data=="urgency_urgent" else "–û–±—ã—á–Ω–∞—è"
    await state.update_data(urgency=urg)

    d = await state.get_data()
    summary = (
        f"<b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ:</b>\n"
        f"–ò–ù–ù: <code>{d['inn']}</code>\n"
        f"Email: <code>{d['email']}</code>\n"
        f"–ò–º—è: <code>{d['name']}</code>\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: <code>{d['phone']}</code>\n"
        f"–í—Ä–µ–º—è —Å–≤—è–∑–∏: <code>{d['contact_time']}</code>\n"
        f"–£—Å–ª—É–≥–∞: <code>{d['service']}</code>\n"
        f"–°—Ä–æ—á–Ω–æ—Å—Ç—å: <code>{d['urgency']}</code>\n\n"
        "–í—Å–µ –≤–µ—Ä–Ω–æ?"
    )
    kb = InlineKeyboardMarkup(row_width=2).add(
        InlineKeyboardButton("‚úÖ –î–∞, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="confirm"),
        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞",       callback_data="cancel")
    )
    await OrderStates.next()
    await cq.message.edit_text(summary, reply_markup=kb, parse_mode="HTML")
    await cq.answer()

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
@dp.callback_query_handler(lambda c: c.data=="confirm", state=OrderStates.confirm)
async def process_confirm(cq: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    ok = False
    try:
        resp = requests.post(
            FLASK_ADMIN_API,
            json={
                "inn":          data['inn'],
                "email":        data['email'],
                "name":         data['name'],
                "phone":        data['phone'],
                "contact_time": data['contact_time'],
                "service":      data['service'],
                "urgency":      data['urgency'],
            },
            auth=(ADMIN_USER, ADMIN_PASS),
            timeout=5
        )
        ok = resp.ok
    except Exception as e:
        print("API error:", e)
        ok = False

    # —É–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞ –≤ Telegram
    admin_msg = (
        f"üíº <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!</b>\n"
        f"–ò–ù–ù: <code>{data['inn']}</code>\n"
        f"Email: <code>{data['email']}</code>\n"
        f"–ò–º—è: <code>{data['name']}</code>\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: <code>{data['phone']}</code>\n"
        f"–í—Ä–µ–º—è —Å–≤—è–∑–∏: <code>{data['contact_time']}</code>\n"
        f"–£—Å–ª—É–≥–∞: <code>{data['service']}</code>\n"
        f"–°—Ä–æ—á–Ω–æ—Å—Ç—å: <code>{data['urgency']}</code>"
    )
    await bot.send_message(ADMIN_ID, admin_msg, parse_mode="HTML")

    if ok:
        await cq.message.edit_text("‚úÖ –ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.", reply_markup=None)
    else:
        await cq.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=None)

    await state.finish()
    await cq.answer()

# –û—Ç–º–µ–Ω–∞
@dp.callback_query_handler(lambda c: c.data=="cancel", state="*")
async def process_cancel(cq: types.CallbackQuery, state: FSMContext):
    await state.finish()
    await cq.message.edit_text("‚ö†Ô∏è –ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=None)
    await cq.answer()

# –ù–∞–∑–∞–¥
@dp.callback_query_handler(lambda c: c.data=="back", state="*")
async def process_back(cq: types.CallbackQuery, state: FSMContext):
    cur = await state.get_state()
    if cur == OrderStates.waiting_for_email.state:
        await OrderStates.waiting_for_inn.set()
        await cq.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –ò–ù–ù (10 –∏–ª–∏ 12 —Ü–∏—Ñ—Ä):", reply_markup=cancel_kb)
    elif cur == OrderStates.waiting_for_name.state:
        await OrderStates.waiting_for_email.set()
        await cq.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à Email:", reply_markup=back_cancel_kb)
    elif cur == OrderStates.waiting_for_phone.state:
        await OrderStates.waiting_for_name.set()
        await cq.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:", reply_markup=back_cancel_kb)
    elif cur == OrderStates.waiting_for_contact_time.state:
        await OrderStates.waiting_for_phone.set()
        await cq.message.edit_text(
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω (+7XXXXXXXXXX –∏–ª–∏ 8XXXXXXXXXX):",
            reply_markup=back_cancel_kb
        )
    elif cur == OrderStates.waiting_for_service.state:
        await OrderStates.waiting_for_contact_time.set()
        await cq.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:", reply_markup=time_kb)
    elif cur == OrderStates.waiting_for_urgency.state:
        await OrderStates.waiting_for_service.set()
        await cq.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:", reply_markup=service_kb)
    elif cur == OrderStates.confirm.state:
        await OrderStates.waiting_for_urgency.set()
        await cq.message.edit_text("–£–∫–∞–∂–∏—Ç–µ —Å—Ä–æ—á–Ω–æ—Å—Ç—å:", reply_markup=urgency_kb)
    await cq.answer()

# WEBHOOK
async def on_startup(dp):
    await bot.set_webhook(WEBHOOK_URL, allowed_updates=["message","callback_query"])

async def on_shutdown(dp):
    await bot.delete_webhook()
    await storage.close()
    await storage.wait_closed()

if __name__ == "__main__":
    start_webhook(
        dispatcher=dp,
        webhook_path=WEBHOOK_PATH,
        on_startup=on_startup,
        on_shutdown=on_shutdown,
        skip_updates=True,
        host=WEBAPP_HOST, port=WEBAPP_PORT
    )
